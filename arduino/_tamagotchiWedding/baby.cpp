#include "baby.h"
#include <avr/pgmspace.h>

static const byte ASCII[][5] =
{
  {0x00, 0x00, 0x00, 0x00, 0x00} // 20
  , {0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
  , {0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
  , {0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
  , {0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
  , {0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
  , {0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
  , {0x00, 0x00, 0x07, 0x05, 0x07} // 27 ' ----- Celsius modify char
  , {0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
  , {0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
  , {0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
  , {0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
  , {0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
  , {0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
  , {0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
  , {0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
  , {0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
  , {0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
  , {0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
  , {0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
  , {0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
  , {0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
  , {0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
  , {0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
  , {0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
  , {0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
  , {0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
  , {0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
  , {0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
  , {0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
  , {0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
  , {0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
  , {0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
  , {0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
  , {0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
  , {0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
  , {0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
  , {0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
  , {0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
  , {0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
  , {0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
  , {0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
  , {0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
  , {0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
  , {0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
  , {0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
  , {0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
  , {0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
  , {0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
  , {0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
  , {0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
  , {0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
  , {0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
  , {0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
  , {0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
  , {0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
  , {0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
  , {0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
  , {0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
  , {0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
  , {0x02, 0x04, 0x08, 0x10, 0x20} // 5c Y
  , {0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
  , {0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
  , {0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
  , {0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
  , {0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
  , {0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
  , {0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
  , {0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
  , {0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
  , {0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
  , {0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
  , {0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
  , {0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
  , {0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
  , {0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
  , {0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
  , {0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
  , {0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
  , {0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
  , {0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
  , {0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
  , {0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
  , {0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
  , {0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
  , {0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
  , {0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
  , {0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
  , {0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
  , {0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
  , {0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
  , {0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
  , {0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
  , {0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
  , {0x10, 0x08, 0x08, 0x10, 0x08} // 7e ‹
  , {0x00, 0x06, 0x09, 0x09, 0x06} // 7f ›
};

// Bitmap definition


static PROGMEM const char baby[]= {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0C, 0x04, 0x0E, 0x18, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40,
  0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20,
  0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x04, 0x02,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x0C, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20,
  0x2F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC4, 0x22, 0x13, 0xD3, 0xD2, 0xD2, 0xD0,
  0x10, 0x10, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x90,
  0xD0, 0xD3, 0x92, 0x11, 0x13, 0xE6, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40,
  0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x04, 0x04, 0x09, 0x39, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04,
  0x09, 0x09, 0x09, 0x05, 0x04, 0x04, 0x06, 0x01, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00,
  0x01, 0x06, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xC0, 0x73, 0x08, 0x09, 0x0C, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x08,
  0x10, 0x10, 0x20, 0x20, 0x20, 0x21, 0x41, 0x42, 0x42, 0x42, 0x44, 0x44, 0x84, 0x84, 0x84, 0x84,
  0x84, 0xC4, 0x44, 0x44, 0x44, 0x44, 0x46, 0x42, 0x42, 0x41, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
  0x08, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static PROGMEM const char baby_orig [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0xC4, 0x22, 0x13, 0xD3, 0xD2, 0xD2, 0xD0, 0x10, 0x10, 0xE0, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x90, 0xD0, 0xD3, 0x92, 0x11, 0x13, 0xE6,
  0x0C, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x09, 0x09, 0x09, 0x05, 0x04, 0x04, 0x06, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x06, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04,
  0x03, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x21, 0x41, 0x42, 0x42, 0x42, 0x44, 0x44,
  0x84, 0x84, 0x84, 0x84, 0x84, 0xC4, 0x44, 0x44, 0x44, 0x44, 0x46, 0x42, 0x42, 0x41, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_blink [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x84, 0x82, 0x83, 0x83, 0xC2, 0xC2, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC3, 0xC2, 0x81, 0x83, 0x86,
  0x0C, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x21, 0x41, 0x42, 0x42, 0x42, 0x44, 0x44,
  0x84, 0x84, 0x84, 0x84, 0x84, 0xC4, 0x44, 0x44, 0x44, 0x44, 0x46, 0x42, 0x42, 0x41, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_O [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0xC2, 0x23, 0x13, 0xD3, 0xD2, 0xD2, 0xD0, 0x10, 0x10, 0xE0, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x92, 0xD2, 0xD3, 0x93, 0x13, 0x12, 0xE2,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x09, 0x09, 0x09, 0x05, 0x04, 0x04, 0x06, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x06, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04,
  0x03, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
  0x8F, 0x99, 0x91, 0x91, 0x91, 0xD3, 0x5E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_angry [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0xC6, 0x22, 0x11, 0xD1, 0xD0, 0xD0, 0xD0, 0x10, 0x10, 0xE0, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x90, 0xD0, 0xD0, 0x90, 0x10, 0x11, 0xE1,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x09, 0x09, 0x09, 0x05, 0x04, 0x04, 0x06, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x06, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04,
  0x03, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x44, 0x44, 0x44, 0x46,
  0x82, 0x82, 0x83, 0x81, 0x81, 0xC1, 0x43, 0x42, 0x42, 0x46, 0x44, 0x4C, 0x48, 0x40, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_smile [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0xC4, 0x22, 0x13, 0xD3, 0xD2, 0xD2, 0xD0, 0x10, 0x10, 0xE0, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x20, 0x90, 0xD0, 0xD3, 0x92, 0x11, 0x13, 0xE6,
  0x0C, 0x00, 0x00, 0x00, 0x01, 0x02, 0x84, 0x89, 0x89, 0x89, 0x85, 0x04, 0x04, 0x06, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x06, 0x04, 0x05, 0x05, 0x85, 0x85, 0x84, 0x84,
  0x03, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x21, 0x41, 0x43, 0x43, 0x43, 0x45, 0x45,
  0x85, 0x85, 0x8D, 0x8D, 0x8D, 0xCD, 0x4D, 0x45, 0x45, 0x45, 0x47, 0x43, 0x43, 0x41, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_smile_blink [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x84, 0x82, 0x83, 0x83, 0xC2, 0xC2, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC3, 0xC2, 0x81, 0x83, 0x86,
  0x0C, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0x81, 0x81, 0x81, 0x81, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x81, 0x81, 0x81,
  0x01, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x21, 0x41, 0x43, 0x43, 0x43, 0x45, 0x45,
  0x85, 0x85, 0x8D, 0x8D, 0x8D, 0xCD, 0x4D, 0x45, 0x45, 0x45, 0x47, 0x43, 0x43, 0x41, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_cry1 [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x04, 0x02, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0, 0x60, 0x63, 0x62, 0x61, 0x63, 0x06,
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x2C, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4E,
  0x9B, 0x91, 0x91, 0x91, 0x91, 0xD9, 0x4B, 0x4E, 0x40, 0x4C, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_cry2 [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x04, 0x02, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0, 0x60, 0x63, 0x62, 0x61, 0x63, 0x06,
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80,
  0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x43, 0x40, 0x4F,
  0xB1, 0xA0, 0xA0, 0xC0, 0xE0, 0xE1, 0x7F, 0x40, 0x40, 0x60, 0x40, 0x40, 0x40, 0x43, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_cry3 [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x04, 0x02, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0, 0x60, 0x63, 0x62, 0x61, 0x63, 0x06,
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x43, 0x40, 0x40, 0x58, 0x40, 0x40,
  0x9E, 0xB3, 0xB1, 0x91, 0x91, 0xD1, 0x57, 0x5C, 0x43, 0x40, 0x40, 0x40, 0x40, 0x58, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char baby_cry4 [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x04, 0x02, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0, 0x60, 0x63, 0xE2, 0x61, 0x63, 0x06,
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00,
  0x20, 0x20, 0xA0, 0xA0, 0x20, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x58, 0x40, 0x40, 0x40, 0x5C, 0x77,
  0xC1, 0xC1, 0x81, 0xC1, 0xC1, 0xC1, 0x63, 0x7E, 0x7B, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20,
  0x10, 0x10, 0x10, 0x10,
};

static PROGMEM const char poopImg[] = {
  0x00, 0x0C, 0xD8, 0x60, 0x00, 0x00, 0x0F, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x13, 0xF6, 0xF0, 0xC0,
  0x00, 0x38, 0x68, 0x4F, 0xF0, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xC0, 0x00,
};

CLcd5110::CLcd5110()
{

}

// LCD Procedures
void CLcd5110::LcdClear()
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
  }
}

void CLcd5110::LcdInitialise()
{
  pinMode(PIN_SCE, OUTPUT);
  pinMode(PIN_RESET, OUTPUT);
  pinMode(PIN_DC, OUTPUT);
  pinMode(PIN_SDIN, OUTPUT);
  pinMode(PIN_SCLK, OUTPUT);
  digitalWrite(PIN_RESET, LOW);
  digitalWrite(PIN_RESET, HIGH);
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
  LcdWrite(LCD_C, 0xb1 );  // Set LCD Vop (Contrast).
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
  LcdWrite(LCD_C, 0x10 );  // LCD bias mode 1:48. //0x13
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void CLcd5110::gotoXY(int x, int y)
{
  LcdWrite( 0, 0x80 | x);  // Column.
  LcdWrite( 0, 0x40 | y);  // Row.

}
void CLcd5110::LcdWrite(char dc, char data)
{
  digitalWrite(PIN_DC, dc);
  digitalWrite(PIN_SCE, LOW);
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
  digitalWrite(PIN_SCE, HIGH);
}

void CLcd5110::LcdString(char* characters)
{
  while (*characters)
  {
    LcdCharacter(*characters++);
  }
}

void CLcd5110::LcdCharacter(char character)
{
  int CharSpace = 1;
  if (CharSpace > 0) {
    LcdWrite(LCD_D, 0x00);
  }

  for (int index = 0; index < 5; index++)
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }

  if (CharSpace > 1) {
    LcdWrite(LCD_D, 0x00);
  }

}

void CLcd5110::LcdBitmap(char my_array[]) {
  gotoXY(0, 0);
  for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
    LcdWrite(LCD_D, pgm_read_byte_near(my_array + index));
}

// rect size: (27,2)(60,5)
// Drawing parts fces:

void CBaby::drawFacePart(char my_array[])
{
  CLcd5110::gotoXY(27, 2);
  for (int index = 0 ; index < 33 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(my_array + index));
  CLcd5110::gotoXY(27, 3);
  for (int index = 0 ; index < 33 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(my_array + 33 + index));
  CLcd5110::gotoXY(27, 4);
  for (int index = 0 ; index < 33 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(my_array + 33 * 2 + index));
  CLcd5110::gotoXY(27, 5);
  for (int index = 0 ; index < 33 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(my_array + 33 * 3 + index));
}

void CBaby::drawPoop()
{
  CLcd5110::gotoXY(0, 3);
  for (int index = 0 ; index < 10 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(poopImg + index));
  CLcd5110::gotoXY(0, 4);
  for (int index = 0 ; index < 10 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(poopImg + 109 + index));
  CLcd5110::gotoXY(0, 5);
  for (int index = 0 ; index < 10 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(poopImg + 10 * 2 + index));
  CLcd5110::gotoXY(0, 6);
  for (int index = 0 ; index < 10 ; index++)
    CLcd5110::LcdWrite(LCD_D, pgm_read_byte_near(poopImg + 10 * 3 + index));
}

void CBaby::drawBars(int aVal, int aPos)
{
  aVal = 100 - aVal;

  CLcd5110::gotoXY(aPos, 0);
  if (aVal <= 16)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
  CLcd5110::gotoXY(aPos, 1);
  if (aVal > 16 && aVal <= 32)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
  CLcd5110::gotoXY(aPos, 2);
  if (aVal > 32 && aVal <= 48)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
  CLcd5110::gotoXY(aPos, 3);
  if (aVal > 48 && aVal <= 64)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
  CLcd5110::gotoXY(aPos, 4);
  if (aVal > 64 && aVal <= 80)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
  CLcd5110::gotoXY(aPos, 5);
  if (aVal > 80)
  {
    CLcd5110::LcdWrite(LCD_D, 0xff);
  }
  else CLcd5110::LcdWrite(LCD_D, 0x00);
}

CBaby::CBaby()
{
  hunger = 0;
  poop = 0;
  happy = 100;

  // init lcd
  CLcd5110::LcdInitialise();
  CLcd5110::LcdClear();
  CLcd5110::gotoXY(0, 0);

  CLcd5110::LcdBitmap(baby);

  countCyc = 0;
}

void CBaby::incCount(unsigned char aMax)
{
  countCyc++;
  if (countCyc > aMax)
  {
    countCyc = 0;
  }
}

void CBaby::babyFeed()
{
  hunger -= 40;
  if (hunger < 0)hunger = 0;
  happy += 5;
  if (happy > 100)happy = 100;
  int r = random(0, 4);
  if (r == 1)
  {
    poop = HIGH;
    happy = 0;
    // draw poop
    drawPoop();

    // draw oups face
    drawFacePart(baby_O);
    delay(2000);
  }
}

void CBaby::babyPlay()
{
  happy += 30;
  if (happy > 100)happy = 100;
}

void CBaby::babyClean()
{
  if (poop == HIGH)
  {
    happy += 50;
    if (happy > 100)happy = 100;
    poop = LOW;
    CLcd5110::LcdClear();
    CLcd5110::LcdBitmap(baby);
  }
}

void CBaby::updateBaby()
{
  // update states
  if (hunger < 100)hunger++;
  else if (happy > 0)happy -= 5;
  if (happy > 0)happy--;

  // Write text
  if(poop == LOW)
  {
    CLcd5110::gotoXY(5, 0);
    CLcd5110::LcdString("feed");
  
    CLcd5110::gotoXY(55, 0);
    CLcd5110::LcdString("play");
  }
  

  if (happy < 15)
  {
    // draw face acc. states
    switch (countCyc)
    {
      case 0: drawFacePart(baby_cry1);
        break;
      case 1: drawFacePart(baby_cry2);
        break;
      case 2: drawFacePart(baby_cry3);
        break;
      case 3: drawFacePart(baby_cry4);
        break;
    }
    incCount(4);
  }
  else if (happy < 30)
  {
    // draw face acc. states
    switch (countCyc)
    {
      case 0: drawFacePart(baby_angry);
        break;
      case 2: drawFacePart(baby_angry);
        break;
    }
    incCount(4);
  }
  else if (happy > 30 && happy < 75)
  {
    // draw face acc. states
    switch (countCyc)
    {
      case 2:
      case 0: drawFacePart(baby_orig);
        break;
      case 1: drawFacePart(baby_blink);
        break;
    }
    incCount(6);
  }
  else if (happy >= 75)
  {
    // draw face acc. states
    switch (countCyc)
    {
      case 4:
      case 2:
      case 0: drawFacePart(baby_smile);
        break;
      case 3: drawFacePart(baby_smile_blink);
        break;
    }
    incCount(6);
  }

  CBaby::drawBars(happy, 83);
  CBaby::drawBars(hunger, 1);
}
